import requests
import json
from pathlib import Path
from datetime import datetime


def get_aadToken(resourceAppIdUri):
    tenantId = '<tentant>'
    appId = '<app>'
    appSecret = '<secret>'

    # Get azure auth token
    url = f"https://login.microsoftonline.com/{tenantId}/oauth2/token"
    resourceAppIdUri = resourceAppIdUri
    payload = {
        'resource': resourceAppIdUri,
        'client_id': appId,
        'client_secret': appSecret,
        'grant_type': 'client_credentials'
    }

    response = requests.request("GET", url, data=payload)
    jsonResponse = response.json()
    aadToken = jsonResponse["access_token"]
    return aadToken


def get_full_export(aadToken):
    headers = {
        'Authorization': 'Bearer ' + aadToken,
        'Content-Type': 'application/json'
    }

    url = "https://api-eu.securitycenter.microsoft.com/api/machines/SoftwareVulnerabilitiesExport"
    payload = {}
    response = requests.request("GET", url, headers=headers, params=payload)

    exportfiles = response.json()['exportFiles']
    for idx, file in enumerate(exportfiles):
        download = requests.request("GET", file)
        today = datetime.now().strftime("%Y-%m-%dT%H%M%S")
        path = Path(__file__).parent / f'../data/{today}_defender_vulnerabilities_full_export_{idx}.json.gz'
        path.open('wb').write(download.content)

    update_checkpoint('Full export')


def get_delta_export(aadToken):
    headers = {
        'Authorization': 'Bearer ' + aadToken,
        'Content-Type': 'application/json'
    }

    url = "https://api-eu.securitycenter.microsoft.com/api/machines/SoftwareVulnerabilityChangesByMachine"

    try:
        path = Path(__file__).parent / "update_checkpoint.json"
        with path.open("r") as f:
            for line in f:
                pass
            last_line = line
        updatestatus = json.loads(last_line)

        payload = {
            'sinceTime': updatestatus['time'],
            'pageSize': 200000
        }

        response = requests.request(
            "GET", url, headers=headers, params=payload)
        jsonResponse = response.json()
        values = jsonResponse['value']

        # Writing to file if response has content
        if values:
            today = datetime.now().strftime("%Y-%m-%dT%H%M%S")
            path = Path(__file__).parent / \
                f"../data/{today}_defender_vulnerabilities_delta_export.txt"
            with path.open("w") as f:
                f.write('\n'.join(json.dumps(i) for i in values))

    except FileNotFoundError:
        pass

    finally:
        update_checkpoint('Delta export')


def get_vulnerabilities_description(aadToken):
    # Query to get description of the vulnerabilites in the tenant devices
    query = '''DeviceTvmSoftwareVulnerabilitiesKB
    | join kind=innerunique (DeviceTvmSoftwareVulnerabilities) on CveId
    | summarize arg_max(LastModifiedTime, *) by CveId
    | project CveId, CvssScore, IsExploitAvailable, VulnerabilitySeverityLevel, VulnerabilityDescription, LastModifiedTime, PublishedDate, RecommendedSecurityUpdateId'''

    headers = {
        'Authorization': 'Bearer ' + aadToken,
        'Content-Type': 'application/json'
    }

    url = "https://api.security.microsoft.com/api/advancedhunting/run"
    data = json.dumps({'Query': query})

    response = requests.request("POST", url, headers=headers, data=data)
    jsonResponse = response.json()
    values = jsonResponse['Results']

    # Writing to file if response has content
    if values:
        today = datetime.now().strftime("%Y-%m-%dT%H%M%S")
        path = Path(__file__).parent / f"../data/{today}_defender_vulnerabilities_description.txt"
        with path.open("w") as f:
            f.write('\n'.join(json.dumps(i) for i in values))


def update_checkpoint(export_type):
    # Save statustime to file
    updatestatus = {}
    updatestatus['type'] = export_type
    updatestatus['time'] = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")
    path = Path(__file__).parent / "update_checkpoint.json"
    with path.open("a") as f:
        f.write('\n')
        f.write(json.dumps(updatestatus))


if __name__ == "__main__":
    aadToken = get_aadToken('https://api-eu.securitycenter.microsoft.com')

    # Running a full export on sundays when it's between 10 and 14
    if datetime.today().isoweekday() == 7 and 10 <= datetime.utcnow().hour and datetime.utcnow().hour <= 14:
        get_full_export(aadToken)
    # Running delta export all other days
    else:
        get_delta_export(aadToken)

    if (datetime.today().isoweekday() in [1, 3, 5]) and 4 <= datetime.utcnow().hour and datetime.utcnow().hour <= 10:
        aadToken_hunting = get_aadToken('https://api.security.microsoft.com')
        get_vulnerabilities_description(aadToken_hunting)
