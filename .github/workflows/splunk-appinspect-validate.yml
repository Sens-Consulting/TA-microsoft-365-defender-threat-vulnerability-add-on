name: Splunk Package, Vet and app

on: [push]

# Set variables accordingly
env:
  APP_NAME: TA-app

jobs:
  Package-and-Inspect-app:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      
      - name: Print
        run: ls -la

      
#      - name: Download and install Splunk Packaging Toolkit (SLIM)
#        run: |
#          wget https://download.splunk.com/misc/packaging-toolkit/splunk-packaging-toolkit-1.0.1.tar.gz
#          pip install splunk-packaging-toolkit-1.0.1.tar.gz
#
#      - name: Generate app manifest
#        run: |
#          slim generate-manifest TA-app -o TA-app/app.manifest
#
#      - name: Package app
#        id: appname
#        run: |
#          mkdir tmp && slim package TA-app --output-dir=tmp
#          echo "BUILDPKG=$(basename tmp/*tar.gz)" >> $GITHUB_ENV
#          echo "APP_VERSION=$(echo $(basename tmp/*tar.gz) | grep --perl-regexp '\d\.\d\.\d' --only-matching)" >> $GITHUB_ENV
#      
#      - name: Splunk AppInspect login
#        id: splunklogin
#        uses: fjogeleit/http-request-action@v1
#        with:
#          url: 'https://api.splunk.com/2.0/rest/login/splunk'
#          method: 'GET'
#          username: ${{ secrets.SPLUNKBASE_USER }}
#          password: ${{ secrets.SPLUNKBASE_PASSWORD }}
#
#      - name: Get AppInspect token
#        run: |
#          echo "SPLUNK_APPINSPECT_TOKEN=${{ fromJSON(steps.splunklogin.outputs.response).data.token }}" >> $GITHUB_ENV
#      
#      - name: Setup Python
#        uses: actions/setup-python@v2
#
#      - name: Install Python packages
#        run: |
#          python -m pip install --upgrade pip
#          pip install requests
#        
#      - name: Run Splunk AppInspect 
#        uses: jannekem/run-python-script-action@v1
#        id: appinspect
#        with:
#          script: |
#            import requests
#            import time
#
#            # Submit app to AppInspect validation
#            url = "https://appinspect.splunk.com/v1/app/validate"
#            payload={'included_tags': 'cloud'}
#            files=[('app_package',('${{ env.BUILDPKG }}',open('./tmp/${{ env.BUILDPKG }}','rb'),'application/octet-stream'))]
#            headers = {
#                'Authorization': 'bearer ${{ env.SPLUNK_APPINSPECT_TOKEN }}'
#            }
#            response = requests.request("POST", url, headers=headers, data=payload, files=files)
#            responseJson = response.json()
#            REQUEST_ID=responseJson['request_id']
#            
#            # Get AppInspect status 
#            url = f"https://appinspect.splunk.com/v1/app/validate/status/{REQUEST_ID}"
#            response = requests.request("GET", url, headers=headers)
#            responseJson = response.json()
#            # Back off until SUCCESS or ERROR
#            while responseJson['status'] == 'PROCESSING':
#                time.sleep(5)
#                url = f"https://appinspect.splunk.com/v1/app/validate/status/{REQUEST_ID}"
#                response = requests.request("GET", url, headers=headers)
#                responseJson = response.json()
#            
#            # Get AppInspect report - JSON
#            url = f"https://appinspect.splunk.com/v1/app/report/{REQUEST_ID}"
#            response = requests.request("GET", url, headers=headers)
#            responseJson = response.json()
#            if responseJson['summary']['error'] > 0 or responseJson['summary']['failure'] > 0:
#                    print("AppInspect has failed, see generated report")
#                    set_env("INSPECT_STATUS","failed")
#
#            # Get AppInspect report - HTML
#            url = f"https://appinspect.splunk.com/v1/app/report/{REQUEST_ID}"
#            headers = {
#                'Authorization': 'bearer ${{ env.SPLUNK_APPINSPECT_TOKEN }}',
#                'Content-Type': 'text/html'
#            }
#            response = requests.request("GET", url, headers=headers)
#            
#            # Download report
#            with open("appinspect-report-${{ env.APP_VERSION }}.html", "w") as f:
#                f.write(response.text)
#
#      - name: Upload AppInspect report
#        uses: actions/upload-artifact@v3
#        with:
#          name: appinspect-report
#          path: appinspect-report-${{ env.APP_VERSION }}.html
#      
#      - name: Set exit status depending on AppInspect results
#        if: ${{ env.INSPECT_STATUS == 'failed' }}
#        run: exit 1
#
##      - name: Release
##        uses: softprops/action-gh-release@v1
##        with:
##          files: ./tmp/*.tar.gz
##          name: "${{ env.BUILDPKG }}"
##          tag_name: v${{ env.APP_VERSION }}
#
